// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"hbase"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  bool exists(string table, TGet tget)")
	fmt.Fprintln(os.Stderr, "   existsAll(string table,  tgets)")
	fmt.Fprintln(os.Stderr, "  TResult get(string table, TGet tget)")
	fmt.Fprintln(os.Stderr, "   getMultiple(string table,  tgets)")
	fmt.Fprintln(os.Stderr, "  void put(string table, TPut tput)")
	fmt.Fprintln(os.Stderr, "  bool checkAndPut(string table, string row, string family, string qualifier, string value, TPut tput)")
	fmt.Fprintln(os.Stderr, "  void putMultiple(string table,  tputs)")
	fmt.Fprintln(os.Stderr, "  void deleteSingle(string table, TDelete tdelete)")
	fmt.Fprintln(os.Stderr, "   deleteMultiple(string table,  tdeletes)")
	fmt.Fprintln(os.Stderr, "  bool checkAndDelete(string table, string row, string family, string qualifier, string value, TDelete tdelete)")
	fmt.Fprintln(os.Stderr, "  TResult increment(string table, TIncrement tincrement)")
	fmt.Fprintln(os.Stderr, "  TResult append(string table, TAppend tappend)")
	fmt.Fprintln(os.Stderr, "  i32 openScanner(string table, TScan tscan)")
	fmt.Fprintln(os.Stderr, "   getScannerRows(i32 scannerId, i32 numRows)")
	fmt.Fprintln(os.Stderr, "  void closeScanner(i32 scannerId)")
	fmt.Fprintln(os.Stderr, "  void mutateRow(string table, TRowMutations trowMutations)")
	fmt.Fprintln(os.Stderr, "   getScannerResults(string table, TScan tscan, i32 numRows)")
	fmt.Fprintln(os.Stderr, "  THRegionLocation getRegionLocation(string table, string row, bool reload)")
	fmt.Fprintln(os.Stderr, "   getAllRegionLocations(string table)")
	fmt.Fprintln(os.Stderr, "  bool checkAndMutate(string table, string row, string family, string qualifier, TCompareOp compareOp, string value, TRowMutations rowMutations)")
	fmt.Fprintln(os.Stderr, "  TTableDescriptor getTableDescriptor(TTableName table)")
	fmt.Fprintln(os.Stderr, "   getTableDescriptors( tables)")
	fmt.Fprintln(os.Stderr, "  bool tableExists(TTableName tableName)")
	fmt.Fprintln(os.Stderr, "   getTableDescriptorsByPattern(string regex, bool includeSysTables)")
	fmt.Fprintln(os.Stderr, "   getTableDescriptorsByNamespace(string name)")
	fmt.Fprintln(os.Stderr, "   getTableNamesByPattern(string regex, bool includeSysTables)")
	fmt.Fprintln(os.Stderr, "   getTableNamesByNamespace(string name)")
	fmt.Fprintln(os.Stderr, "  void createTable(TTableDescriptor desc,  splitKeys)")
	fmt.Fprintln(os.Stderr, "  void deleteTable(TTableName tableName)")
	fmt.Fprintln(os.Stderr, "  void truncateTable(TTableName tableName, bool preserveSplits)")
	fmt.Fprintln(os.Stderr, "  void enableTable(TTableName tableName)")
	fmt.Fprintln(os.Stderr, "  void disableTable(TTableName tableName)")
	fmt.Fprintln(os.Stderr, "  bool isTableEnabled(TTableName tableName)")
	fmt.Fprintln(os.Stderr, "  bool isTableDisabled(TTableName tableName)")
	fmt.Fprintln(os.Stderr, "  bool isTableAvailable(TTableName tableName)")
	fmt.Fprintln(os.Stderr, "  bool isTableAvailableWithSplit(TTableName tableName,  splitKeys)")
	fmt.Fprintln(os.Stderr, "  void addColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
	fmt.Fprintln(os.Stderr, "  void deleteColumnFamily(TTableName tableName, string column)")
	fmt.Fprintln(os.Stderr, "  void modifyColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
	fmt.Fprintln(os.Stderr, "  void modifyTable(TTableDescriptor desc)")
	fmt.Fprintln(os.Stderr, "  void createNamespace(TNamespaceDescriptor namespaceDesc)")
	fmt.Fprintln(os.Stderr, "  void modifyNamespace(TNamespaceDescriptor namespaceDesc)")
	fmt.Fprintln(os.Stderr, "  void deleteNamespace(string name)")
	fmt.Fprintln(os.Stderr, "  TNamespaceDescriptor getNamespaceDescriptor(string name)")
	fmt.Fprintln(os.Stderr, "   listNamespaceDescriptors()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := hbase.NewTHBaseServiceClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "exists":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Exists requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg144 := flag.Arg(2)
		mbTrans145 := thrift.NewTMemoryBufferLen(len(arg144))
		defer mbTrans145.Close()
		_, err146 := mbTrans145.WriteString(arg144)
		if err146 != nil {
			Usage()
			return
		}
		factory147 := thrift.NewTJSONProtocolFactory()
		jsProt148 := factory147.GetProtocol(mbTrans145)
		argvalue1 := hbase.NewTGet()
		err149 := argvalue1.Read(jsProt148)
		if err149 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Exists(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "existsAll":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExistsAll requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg151 := flag.Arg(2)
		mbTrans152 := thrift.NewTMemoryBufferLen(len(arg151))
		defer mbTrans152.Close()
		_, err153 := mbTrans152.WriteString(arg151)
		if err153 != nil {
			Usage()
			return
		}
		factory154 := thrift.NewTJSONProtocolFactory()
		jsProt155 := factory154.GetProtocol(mbTrans152)
		containerStruct1 := hbase.NewTHBaseServiceExistsAllArgs()
		err156 := containerStruct1.ReadField2(jsProt155)
		if err156 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Tgets
		value1 := argvalue1
		fmt.Print(client.ExistsAll(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Get requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg158 := flag.Arg(2)
		mbTrans159 := thrift.NewTMemoryBufferLen(len(arg158))
		defer mbTrans159.Close()
		_, err160 := mbTrans159.WriteString(arg158)
		if err160 != nil {
			Usage()
			return
		}
		factory161 := thrift.NewTJSONProtocolFactory()
		jsProt162 := factory161.GetProtocol(mbTrans159)
		argvalue1 := hbase.NewTGet()
		err163 := argvalue1.Read(jsProt162)
		if err163 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Get(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getMultiple":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetMultiple requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg165 := flag.Arg(2)
		mbTrans166 := thrift.NewTMemoryBufferLen(len(arg165))
		defer mbTrans166.Close()
		_, err167 := mbTrans166.WriteString(arg165)
		if err167 != nil {
			Usage()
			return
		}
		factory168 := thrift.NewTJSONProtocolFactory()
		jsProt169 := factory168.GetProtocol(mbTrans166)
		containerStruct1 := hbase.NewTHBaseServiceGetMultipleArgs()
		err170 := containerStruct1.ReadField2(jsProt169)
		if err170 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Tgets
		value1 := argvalue1
		fmt.Print(client.GetMultiple(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "put":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Put requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg172 := flag.Arg(2)
		mbTrans173 := thrift.NewTMemoryBufferLen(len(arg172))
		defer mbTrans173.Close()
		_, err174 := mbTrans173.WriteString(arg172)
		if err174 != nil {
			Usage()
			return
		}
		factory175 := thrift.NewTJSONProtocolFactory()
		jsProt176 := factory175.GetProtocol(mbTrans173)
		argvalue1 := hbase.NewTPut()
		err177 := argvalue1.Read(jsProt176)
		if err177 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Put(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "checkAndPut":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "CheckAndPut requires 6 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		argvalue2 := []byte(flag.Arg(3))
		value2 := argvalue2
		argvalue3 := []byte(flag.Arg(4))
		value3 := argvalue3
		argvalue4 := []byte(flag.Arg(5))
		value4 := argvalue4
		arg183 := flag.Arg(6)
		mbTrans184 := thrift.NewTMemoryBufferLen(len(arg183))
		defer mbTrans184.Close()
		_, err185 := mbTrans184.WriteString(arg183)
		if err185 != nil {
			Usage()
			return
		}
		factory186 := thrift.NewTJSONProtocolFactory()
		jsProt187 := factory186.GetProtocol(mbTrans184)
		argvalue5 := hbase.NewTPut()
		err188 := argvalue5.Read(jsProt187)
		if err188 != nil {
			Usage()
			return
		}
		value5 := argvalue5
		fmt.Print(client.CheckAndPut(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "putMultiple":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PutMultiple requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg190 := flag.Arg(2)
		mbTrans191 := thrift.NewTMemoryBufferLen(len(arg190))
		defer mbTrans191.Close()
		_, err192 := mbTrans191.WriteString(arg190)
		if err192 != nil {
			Usage()
			return
		}
		factory193 := thrift.NewTJSONProtocolFactory()
		jsProt194 := factory193.GetProtocol(mbTrans191)
		containerStruct1 := hbase.NewTHBaseServicePutMultipleArgs()
		err195 := containerStruct1.ReadField2(jsProt194)
		if err195 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Tputs
		value1 := argvalue1
		fmt.Print(client.PutMultiple(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "deleteSingle":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteSingle requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg197 := flag.Arg(2)
		mbTrans198 := thrift.NewTMemoryBufferLen(len(arg197))
		defer mbTrans198.Close()
		_, err199 := mbTrans198.WriteString(arg197)
		if err199 != nil {
			Usage()
			return
		}
		factory200 := thrift.NewTJSONProtocolFactory()
		jsProt201 := factory200.GetProtocol(mbTrans198)
		argvalue1 := hbase.NewTDelete()
		err202 := argvalue1.Read(jsProt201)
		if err202 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.DeleteSingle(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "deleteMultiple":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteMultiple requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg204 := flag.Arg(2)
		mbTrans205 := thrift.NewTMemoryBufferLen(len(arg204))
		defer mbTrans205.Close()
		_, err206 := mbTrans205.WriteString(arg204)
		if err206 != nil {
			Usage()
			return
		}
		factory207 := thrift.NewTJSONProtocolFactory()
		jsProt208 := factory207.GetProtocol(mbTrans205)
		containerStruct1 := hbase.NewTHBaseServiceDeleteMultipleArgs()
		err209 := containerStruct1.ReadField2(jsProt208)
		if err209 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Tdeletes
		value1 := argvalue1
		fmt.Print(client.DeleteMultiple(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "checkAndDelete":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "CheckAndDelete requires 6 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		argvalue2 := []byte(flag.Arg(3))
		value2 := argvalue2
		argvalue3 := []byte(flag.Arg(4))
		value3 := argvalue3
		argvalue4 := []byte(flag.Arg(5))
		value4 := argvalue4
		arg215 := flag.Arg(6)
		mbTrans216 := thrift.NewTMemoryBufferLen(len(arg215))
		defer mbTrans216.Close()
		_, err217 := mbTrans216.WriteString(arg215)
		if err217 != nil {
			Usage()
			return
		}
		factory218 := thrift.NewTJSONProtocolFactory()
		jsProt219 := factory218.GetProtocol(mbTrans216)
		argvalue5 := hbase.NewTDelete()
		err220 := argvalue5.Read(jsProt219)
		if err220 != nil {
			Usage()
			return
		}
		value5 := argvalue5
		fmt.Print(client.CheckAndDelete(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "increment":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Increment requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg222 := flag.Arg(2)
		mbTrans223 := thrift.NewTMemoryBufferLen(len(arg222))
		defer mbTrans223.Close()
		_, err224 := mbTrans223.WriteString(arg222)
		if err224 != nil {
			Usage()
			return
		}
		factory225 := thrift.NewTJSONProtocolFactory()
		jsProt226 := factory225.GetProtocol(mbTrans223)
		argvalue1 := hbase.NewTIncrement()
		err227 := argvalue1.Read(jsProt226)
		if err227 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Increment(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "append":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Append requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg229 := flag.Arg(2)
		mbTrans230 := thrift.NewTMemoryBufferLen(len(arg229))
		defer mbTrans230.Close()
		_, err231 := mbTrans230.WriteString(arg229)
		if err231 != nil {
			Usage()
			return
		}
		factory232 := thrift.NewTJSONProtocolFactory()
		jsProt233 := factory232.GetProtocol(mbTrans230)
		argvalue1 := hbase.NewTAppend()
		err234 := argvalue1.Read(jsProt233)
		if err234 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Append(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "openScanner":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "OpenScanner requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg236 := flag.Arg(2)
		mbTrans237 := thrift.NewTMemoryBufferLen(len(arg236))
		defer mbTrans237.Close()
		_, err238 := mbTrans237.WriteString(arg236)
		if err238 != nil {
			Usage()
			return
		}
		factory239 := thrift.NewTJSONProtocolFactory()
		jsProt240 := factory239.GetProtocol(mbTrans237)
		argvalue1 := hbase.NewTScan()
		err241 := argvalue1.Read(jsProt240)
		if err241 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.OpenScanner(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getScannerRows":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetScannerRows requires 2 args")
			flag.Usage()
		}
		tmp0, err242 := (strconv.Atoi(flag.Arg(1)))
		if err242 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err243 := (strconv.Atoi(flag.Arg(2)))
		if err243 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetScannerRows(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "closeScanner":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CloseScanner requires 1 args")
			flag.Usage()
		}
		tmp0, err244 := (strconv.Atoi(flag.Arg(1)))
		if err244 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.CloseScanner(context.Background(), value0))
		fmt.Print("\n")
		break
	case "mutateRow":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MutateRow requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg246 := flag.Arg(2)
		mbTrans247 := thrift.NewTMemoryBufferLen(len(arg246))
		defer mbTrans247.Close()
		_, err248 := mbTrans247.WriteString(arg246)
		if err248 != nil {
			Usage()
			return
		}
		factory249 := thrift.NewTJSONProtocolFactory()
		jsProt250 := factory249.GetProtocol(mbTrans247)
		argvalue1 := hbase.NewTRowMutations()
		err251 := argvalue1.Read(jsProt250)
		if err251 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.MutateRow(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getScannerResults":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetScannerResults requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg253 := flag.Arg(2)
		mbTrans254 := thrift.NewTMemoryBufferLen(len(arg253))
		defer mbTrans254.Close()
		_, err255 := mbTrans254.WriteString(arg253)
		if err255 != nil {
			Usage()
			return
		}
		factory256 := thrift.NewTJSONProtocolFactory()
		jsProt257 := factory256.GetProtocol(mbTrans254)
		argvalue1 := hbase.NewTScan()
		err258 := argvalue1.Read(jsProt257)
		if err258 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err259 := (strconv.Atoi(flag.Arg(3)))
		if err259 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetScannerResults(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRegionLocation":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetRegionLocation requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.GetRegionLocation(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getAllRegionLocations":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllRegionLocations requires 1 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		fmt.Print(client.GetAllRegionLocations(context.Background(), value0))
		fmt.Print("\n")
		break
	case "checkAndMutate":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "CheckAndMutate requires 7 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		argvalue2 := []byte(flag.Arg(3))
		value2 := argvalue2
		argvalue3 := []byte(flag.Arg(4))
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := hbase.TCompareOp(tmp4)
		value4 := argvalue4
		argvalue5 := []byte(flag.Arg(6))
		value5 := argvalue5
		arg269 := flag.Arg(7)
		mbTrans270 := thrift.NewTMemoryBufferLen(len(arg269))
		defer mbTrans270.Close()
		_, err271 := mbTrans270.WriteString(arg269)
		if err271 != nil {
			Usage()
			return
		}
		factory272 := thrift.NewTJSONProtocolFactory()
		jsProt273 := factory272.GetProtocol(mbTrans270)
		argvalue6 := hbase.NewTRowMutations()
		err274 := argvalue6.Read(jsProt273)
		if err274 != nil {
			Usage()
			return
		}
		value6 := argvalue6
		fmt.Print(client.CheckAndMutate(context.Background(), value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "getTableDescriptor":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableDescriptor requires 1 args")
			flag.Usage()
		}
		arg275 := flag.Arg(1)
		mbTrans276 := thrift.NewTMemoryBufferLen(len(arg275))
		defer mbTrans276.Close()
		_, err277 := mbTrans276.WriteString(arg275)
		if err277 != nil {
			Usage()
			return
		}
		factory278 := thrift.NewTJSONProtocolFactory()
		jsProt279 := factory278.GetProtocol(mbTrans276)
		argvalue0 := hbase.NewTTableName()
		err280 := argvalue0.Read(jsProt279)
		if err280 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableDescriptor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTableDescriptors":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableDescriptors requires 1 args")
			flag.Usage()
		}
		arg281 := flag.Arg(1)
		mbTrans282 := thrift.NewTMemoryBufferLen(len(arg281))
		defer mbTrans282.Close()
		_, err283 := mbTrans282.WriteString(arg281)
		if err283 != nil {
			Usage()
			return
		}
		factory284 := thrift.NewTJSONProtocolFactory()
		jsProt285 := factory284.GetProtocol(mbTrans282)
		containerStruct0 := hbase.NewTHBaseServiceGetTableDescriptorsArgs()
		err286 := containerStruct0.ReadField1(jsProt285)
		if err286 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Tables
		value0 := argvalue0
		fmt.Print(client.GetTableDescriptors(context.Background(), value0))
		fmt.Print("\n")
		break
	case "tableExists":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TableExists requires 1 args")
			flag.Usage()
		}
		arg287 := flag.Arg(1)
		mbTrans288 := thrift.NewTMemoryBufferLen(len(arg287))
		defer mbTrans288.Close()
		_, err289 := mbTrans288.WriteString(arg287)
		if err289 != nil {
			Usage()
			return
		}
		factory290 := thrift.NewTJSONProtocolFactory()
		jsProt291 := factory290.GetProtocol(mbTrans288)
		argvalue0 := hbase.NewTTableName()
		err292 := argvalue0.Read(jsProt291)
		if err292 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.TableExists(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTableDescriptorsByPattern":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableDescriptorsByPattern requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.GetTableDescriptorsByPattern(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getTableDescriptorsByNamespace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableDescriptorsByNamespace requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTableDescriptorsByNamespace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTableNamesByPattern":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableNamesByPattern requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.GetTableNamesByPattern(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getTableNamesByNamespace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableNamesByNamespace requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTableNamesByNamespace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "createTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 2 args")
			flag.Usage()
		}
		arg299 := flag.Arg(1)
		mbTrans300 := thrift.NewTMemoryBufferLen(len(arg299))
		defer mbTrans300.Close()
		_, err301 := mbTrans300.WriteString(arg299)
		if err301 != nil {
			Usage()
			return
		}
		factory302 := thrift.NewTJSONProtocolFactory()
		jsProt303 := factory302.GetProtocol(mbTrans300)
		argvalue0 := hbase.NewTTableDescriptor()
		err304 := argvalue0.Read(jsProt303)
		if err304 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg305 := flag.Arg(2)
		mbTrans306 := thrift.NewTMemoryBufferLen(len(arg305))
		defer mbTrans306.Close()
		_, err307 := mbTrans306.WriteString(arg305)
		if err307 != nil {
			Usage()
			return
		}
		factory308 := thrift.NewTJSONProtocolFactory()
		jsProt309 := factory308.GetProtocol(mbTrans306)
		containerStruct1 := hbase.NewTHBaseServiceCreateTableArgs()
		err310 := containerStruct1.ReadField2(jsProt309)
		if err310 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.SplitKeys
		value1 := argvalue1
		fmt.Print(client.CreateTable(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "deleteTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTable requires 1 args")
			flag.Usage()
		}
		arg311 := flag.Arg(1)
		mbTrans312 := thrift.NewTMemoryBufferLen(len(arg311))
		defer mbTrans312.Close()
		_, err313 := mbTrans312.WriteString(arg311)
		if err313 != nil {
			Usage()
			return
		}
		factory314 := thrift.NewTJSONProtocolFactory()
		jsProt315 := factory314.GetProtocol(mbTrans312)
		argvalue0 := hbase.NewTTableName()
		err316 := argvalue0.Read(jsProt315)
		if err316 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "truncateTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "TruncateTable requires 2 args")
			flag.Usage()
		}
		arg317 := flag.Arg(1)
		mbTrans318 := thrift.NewTMemoryBufferLen(len(arg317))
		defer mbTrans318.Close()
		_, err319 := mbTrans318.WriteString(arg317)
		if err319 != nil {
			Usage()
			return
		}
		factory320 := thrift.NewTJSONProtocolFactory()
		jsProt321 := factory320.GetProtocol(mbTrans318)
		argvalue0 := hbase.NewTTableName()
		err322 := argvalue0.Read(jsProt321)
		if err322 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.TruncateTable(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "enableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "EnableTable requires 1 args")
			flag.Usage()
		}
		arg324 := flag.Arg(1)
		mbTrans325 := thrift.NewTMemoryBufferLen(len(arg324))
		defer mbTrans325.Close()
		_, err326 := mbTrans325.WriteString(arg324)
		if err326 != nil {
			Usage()
			return
		}
		factory327 := thrift.NewTJSONProtocolFactory()
		jsProt328 := factory327.GetProtocol(mbTrans325)
		argvalue0 := hbase.NewTTableName()
		err329 := argvalue0.Read(jsProt328)
		if err329 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.EnableTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "disableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DisableTable requires 1 args")
			flag.Usage()
		}
		arg330 := flag.Arg(1)
		mbTrans331 := thrift.NewTMemoryBufferLen(len(arg330))
		defer mbTrans331.Close()
		_, err332 := mbTrans331.WriteString(arg330)
		if err332 != nil {
			Usage()
			return
		}
		factory333 := thrift.NewTJSONProtocolFactory()
		jsProt334 := factory333.GetProtocol(mbTrans331)
		argvalue0 := hbase.NewTTableName()
		err335 := argvalue0.Read(jsProt334)
		if err335 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DisableTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "isTableEnabled":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsTableEnabled requires 1 args")
			flag.Usage()
		}
		arg336 := flag.Arg(1)
		mbTrans337 := thrift.NewTMemoryBufferLen(len(arg336))
		defer mbTrans337.Close()
		_, err338 := mbTrans337.WriteString(arg336)
		if err338 != nil {
			Usage()
			return
		}
		factory339 := thrift.NewTJSONProtocolFactory()
		jsProt340 := factory339.GetProtocol(mbTrans337)
		argvalue0 := hbase.NewTTableName()
		err341 := argvalue0.Read(jsProt340)
		if err341 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.IsTableEnabled(context.Background(), value0))
		fmt.Print("\n")
		break
	case "isTableDisabled":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsTableDisabled requires 1 args")
			flag.Usage()
		}
		arg342 := flag.Arg(1)
		mbTrans343 := thrift.NewTMemoryBufferLen(len(arg342))
		defer mbTrans343.Close()
		_, err344 := mbTrans343.WriteString(arg342)
		if err344 != nil {
			Usage()
			return
		}
		factory345 := thrift.NewTJSONProtocolFactory()
		jsProt346 := factory345.GetProtocol(mbTrans343)
		argvalue0 := hbase.NewTTableName()
		err347 := argvalue0.Read(jsProt346)
		if err347 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.IsTableDisabled(context.Background(), value0))
		fmt.Print("\n")
		break
	case "isTableAvailable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsTableAvailable requires 1 args")
			flag.Usage()
		}
		arg348 := flag.Arg(1)
		mbTrans349 := thrift.NewTMemoryBufferLen(len(arg348))
		defer mbTrans349.Close()
		_, err350 := mbTrans349.WriteString(arg348)
		if err350 != nil {
			Usage()
			return
		}
		factory351 := thrift.NewTJSONProtocolFactory()
		jsProt352 := factory351.GetProtocol(mbTrans349)
		argvalue0 := hbase.NewTTableName()
		err353 := argvalue0.Read(jsProt352)
		if err353 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.IsTableAvailable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "isTableAvailableWithSplit":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "IsTableAvailableWithSplit requires 2 args")
			flag.Usage()
		}
		arg354 := flag.Arg(1)
		mbTrans355 := thrift.NewTMemoryBufferLen(len(arg354))
		defer mbTrans355.Close()
		_, err356 := mbTrans355.WriteString(arg354)
		if err356 != nil {
			Usage()
			return
		}
		factory357 := thrift.NewTJSONProtocolFactory()
		jsProt358 := factory357.GetProtocol(mbTrans355)
		argvalue0 := hbase.NewTTableName()
		err359 := argvalue0.Read(jsProt358)
		if err359 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg360 := flag.Arg(2)
		mbTrans361 := thrift.NewTMemoryBufferLen(len(arg360))
		defer mbTrans361.Close()
		_, err362 := mbTrans361.WriteString(arg360)
		if err362 != nil {
			Usage()
			return
		}
		factory363 := thrift.NewTJSONProtocolFactory()
		jsProt364 := factory363.GetProtocol(mbTrans361)
		containerStruct1 := hbase.NewTHBaseServiceIsTableAvailableWithSplitArgs()
		err365 := containerStruct1.ReadField2(jsProt364)
		if err365 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.SplitKeys
		value1 := argvalue1
		fmt.Print(client.IsTableAvailableWithSplit(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "addColumnFamily":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddColumnFamily requires 2 args")
			flag.Usage()
		}
		arg366 := flag.Arg(1)
		mbTrans367 := thrift.NewTMemoryBufferLen(len(arg366))
		defer mbTrans367.Close()
		_, err368 := mbTrans367.WriteString(arg366)
		if err368 != nil {
			Usage()
			return
		}
		factory369 := thrift.NewTJSONProtocolFactory()
		jsProt370 := factory369.GetProtocol(mbTrans367)
		argvalue0 := hbase.NewTTableName()
		err371 := argvalue0.Read(jsProt370)
		if err371 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg372 := flag.Arg(2)
		mbTrans373 := thrift.NewTMemoryBufferLen(len(arg372))
		defer mbTrans373.Close()
		_, err374 := mbTrans373.WriteString(arg372)
		if err374 != nil {
			Usage()
			return
		}
		factory375 := thrift.NewTJSONProtocolFactory()
		jsProt376 := factory375.GetProtocol(mbTrans373)
		argvalue1 := hbase.NewTColumnFamilyDescriptor()
		err377 := argvalue1.Read(jsProt376)
		if err377 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddColumnFamily(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "deleteColumnFamily":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteColumnFamily requires 2 args")
			flag.Usage()
		}
		arg378 := flag.Arg(1)
		mbTrans379 := thrift.NewTMemoryBufferLen(len(arg378))
		defer mbTrans379.Close()
		_, err380 := mbTrans379.WriteString(arg378)
		if err380 != nil {
			Usage()
			return
		}
		factory381 := thrift.NewTJSONProtocolFactory()
		jsProt382 := factory381.GetProtocol(mbTrans379)
		argvalue0 := hbase.NewTTableName()
		err383 := argvalue0.Read(jsProt382)
		if err383 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		fmt.Print(client.DeleteColumnFamily(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "modifyColumnFamily":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ModifyColumnFamily requires 2 args")
			flag.Usage()
		}
		arg385 := flag.Arg(1)
		mbTrans386 := thrift.NewTMemoryBufferLen(len(arg385))
		defer mbTrans386.Close()
		_, err387 := mbTrans386.WriteString(arg385)
		if err387 != nil {
			Usage()
			return
		}
		factory388 := thrift.NewTJSONProtocolFactory()
		jsProt389 := factory388.GetProtocol(mbTrans386)
		argvalue0 := hbase.NewTTableName()
		err390 := argvalue0.Read(jsProt389)
		if err390 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg391 := flag.Arg(2)
		mbTrans392 := thrift.NewTMemoryBufferLen(len(arg391))
		defer mbTrans392.Close()
		_, err393 := mbTrans392.WriteString(arg391)
		if err393 != nil {
			Usage()
			return
		}
		factory394 := thrift.NewTJSONProtocolFactory()
		jsProt395 := factory394.GetProtocol(mbTrans392)
		argvalue1 := hbase.NewTColumnFamilyDescriptor()
		err396 := argvalue1.Read(jsProt395)
		if err396 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.ModifyColumnFamily(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "modifyTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ModifyTable requires 1 args")
			flag.Usage()
		}
		arg397 := flag.Arg(1)
		mbTrans398 := thrift.NewTMemoryBufferLen(len(arg397))
		defer mbTrans398.Close()
		_, err399 := mbTrans398.WriteString(arg397)
		if err399 != nil {
			Usage()
			return
		}
		factory400 := thrift.NewTJSONProtocolFactory()
		jsProt401 := factory400.GetProtocol(mbTrans398)
		argvalue0 := hbase.NewTTableDescriptor()
		err402 := argvalue0.Read(jsProt401)
		if err402 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ModifyTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "createNamespace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateNamespace requires 1 args")
			flag.Usage()
		}
		arg403 := flag.Arg(1)
		mbTrans404 := thrift.NewTMemoryBufferLen(len(arg403))
		defer mbTrans404.Close()
		_, err405 := mbTrans404.WriteString(arg403)
		if err405 != nil {
			Usage()
			return
		}
		factory406 := thrift.NewTJSONProtocolFactory()
		jsProt407 := factory406.GetProtocol(mbTrans404)
		argvalue0 := hbase.NewTNamespaceDescriptor()
		err408 := argvalue0.Read(jsProt407)
		if err408 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateNamespace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "modifyNamespace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ModifyNamespace requires 1 args")
			flag.Usage()
		}
		arg409 := flag.Arg(1)
		mbTrans410 := thrift.NewTMemoryBufferLen(len(arg409))
		defer mbTrans410.Close()
		_, err411 := mbTrans410.WriteString(arg409)
		if err411 != nil {
			Usage()
			return
		}
		factory412 := thrift.NewTJSONProtocolFactory()
		jsProt413 := factory412.GetProtocol(mbTrans410)
		argvalue0 := hbase.NewTNamespaceDescriptor()
		err414 := argvalue0.Read(jsProt413)
		if err414 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ModifyNamespace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "deleteNamespace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteNamespace requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DeleteNamespace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getNamespaceDescriptor":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNamespaceDescriptor requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetNamespaceDescriptor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "listNamespaceDescriptors":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListNamespaceDescriptors requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListNamespaceDescriptors(context.Background()))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
